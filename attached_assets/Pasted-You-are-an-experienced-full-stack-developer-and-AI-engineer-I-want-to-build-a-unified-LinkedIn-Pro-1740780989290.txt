You are an experienced full-stack developer and AI engineer. 
I want to build a unified LinkedIn Profile Optimizer that also includes a secondary “Content Creator & Scheduler” feature. 
Here’s the detailed plan:

-------------------------------------------
1. Overall Architecture & Flow
-------------------------------------------
- **Unified Dashboard**: When users log in, they see:
  - A “Profile Optimizer” section (primary).
  - A “Content Creator & Scheduler” section (secondary).
- **Tabbed Navigation** or a single-page approach with two main modules:
  - **Module 1: Profile Optimizer**
  - **Module 2: Content Scheduler**

-------------------------------------------
2. Profile Optimizer (Primary Focus)
-------------------------------------------
1. **Best Practices Integration**:
   - Provide short checklists or inline tips for each LinkedIn section:
     - Headline: Suggest including role-specific keywords and achievements.
     - Summary: Prompt for data-driven, brand-aligned statements.
     - Experience: Emphasize quantifiable metrics, bullet points, and cross-functional achievements.
     - Skills: Encourage relevant endorsements, highlight marketing/technical skills if applicable.

2. **Real-Time Score & Feedback**:
   - Calculate a “Profile Score” out of 100 based on how many best practices the user follows.
   - Show live feedback: e.g., “Add 1–2 metrics in your summary to improve your score,” “Shorten your headline to under 120 characters,” etc.

3. **AI Profile Photo Builder**:
   - **Step A**: Upload a photo or multiple reference images.
   - **Step B**: AI-based background removal, lighting enhancement, or even generating a new portrait (if advanced capabilities allow).
   - **Step C**: Display a before/after preview; let users choose from 2–3 style options (corporate, casual, creative).
   - Save the final image to the user’s account so they can upload it to LinkedIn.

4. **Implementation Details**:
   - **Front End**: 
     - A React (or Next.js) page with sections for each LinkedIn field (headline, summary, experience, etc.).
     - Inline tooltips or hover effects to display best practice tips.
     - A progress bar or radial dial showing the “Profile Score.”
     - A sub-page or modal for the AI Profile Photo Builder.
   - **Back End / AI**:
     - Node.js/Express (or similar) endpoint that:
       - Analyzes the user’s input for each field (via GPT or another LLM).
       - Calculates the score based on a set of rules (e.g., presence of metrics, length, usage of keywords).
       - Processes or calls an AI image endpoint (e.g., a custom model or an external API) to handle the profile photo enhancement.
   - **Data Storage**:
     - Store user’s LinkedIn data in a database (e.g., MongoDB, Postgres) so they can revisit and edit.

-------------------------------------------
3. Content Creator & Scheduler (Secondary)
-------------------------------------------
1. **Basic Overview**:
   - Advertise it as a complementary feature after the user finishes optimizing their profile.
   - “Now that your LinkedIn profile is ready, keep your audience engaged!”

2. **Content Creation**:
   - Leverage the user’s updated LinkedIn data (headline, summary, achievements) to generate post ideas.
   - Offer AI-driven prompts like “Write a post about your recent project success,” or “Share a marketing tip based on your experience.”

3. **Scheduling & Analytics**:
   - Let users pick dates/times to post on LinkedIn (or possibly other social platforms).
   - Provide basic analytics (if feasible) to track post engagement (likes, comments).

4. **Implementation Details**:
   - **Front End**:
     - A tab or sub-page named “Content Scheduler.”
     - A simple form to generate post ideas or short articles, with an AI-driven text area.
     - A calendar or timeline view for scheduling posts.
   - **Back End**:
     - An endpoint to store scheduled posts in the database.
     - If direct LinkedIn API integration is allowed, set up an OAuth flow to publish posts automatically.
     - Otherwise, store the post copy and remind the user to manually post it.

-------------------------------------------
4. Advanced Features & Monetization Hooks
-------------------------------------------
1. **Profile Optimizer**:
   - Offer a free tier with basic suggestions, then a paid tier with deeper AI analysis, advanced metrics, and extra style options for the photo builder.

2. **Content Scheduler**:
   - Basic post ideas for free, advanced scheduling or analytics for premium users.
   - Possibly integrate a “post performance” tracker if you can access LinkedIn’s analytics.

3. **Gamification**:
   - Award “Profile Badges” or “Content Streaks” for consistent updates or scheduling. 
   - Encourage repeated visits.

-------------------------------------------
5. Steps to Implement & Test
-------------------------------------------
1. **Front-End Setup**:
   - Create a unified dashboard with two main modules: “Profile Optimizer” and “Content Scheduler.”
   - Build forms/sections for each LinkedIn field with best practice tooltips.
   - Implement a “Profile Score” or progress bar that updates in real time.

2. **AI Logic**:
   - For each LinkedIn field, define a set of best practice rules (e.g., “At least 1 metric in your summary,” “Headline under 120 characters,” etc.).
   - Use GPT or a rules-based approach to provide suggestions if the user’s text is missing key elements.
   - For the profile photo builder, either integrate with an external image AI API or build a local solution (depending on your resources).

3. **Content Scheduler**:
   - Create a tab or page that allows the user to input a topic or short brief, then get an AI-generated post draft.
   - Let them pick a date/time to schedule. 
   - If direct LinkedIn posting is not feasible initially, store the post text and remind them manually.

4. **Demo & QA**:
   - Show me how to run the local dev environment on Replit.
   - Provide a test user flow where:
     - The user updates their LinkedIn headline, sees real-time best practice feedback, and tries the AI photo builder.
     - They then explore the “Content Scheduler,” generate a post idea, and schedule it.

After implementing these steps, please share the updated code (front end, back end, database models) and instructions for testing within Replit. Let me know if you need any additional clarifications or if you have suggestions for further improvements.