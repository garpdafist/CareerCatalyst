You are an experienced full-stack developer tasked with building an MVP for a niche job portal website that aggregates job listings and offers candidate tools to help users improve their chances of landing a job. The primary features of the MVP are:

1. **Job Listings Aggregator:**  
   - Integrate with external job APIs (or set up a simple scraping routine) to pull job listings.
   - Display job listings in a clean, paginated format.
   - Allow filtering by parameters like job title, location, and category.

2. **Candidate Tools Module (Initial Focus on a Resume Analyzer):**  
   - Create a tool where users can paste/upload their resume.
   - Analyze the resume text to provide actionable feedback (e.g., keyword matching, structure tips).
   - Display a summary report with recommendations.

3. **Basic User Interface:**  
   - Develop a simple, responsive frontend using a framework like React (or plain HTML/CSS/JS if preferred).
   - Ensure intuitive navigation between the job listings and candidate tool sections.
   - Incorporate a clean design with a focus on user experience.

4. **Backend Setup:**  
   - Use Node.js with Express (or a similar backend framework) to create RESTful endpoints:
     - GET endpoint for job listings.
     - POST endpoint for resume analysis submissions.
   - Connect to a lightweight database (e.g., SQLite, MongoDB) for storing job data and user interactions if needed.

5. **Deployment and Testing:**  
   - Set up the project on Replit for collaborative development and easy deployment.
   - Write basic tests to ensure endpoints work correctly.
   - Integrate logging/analytics to track user interactions for future improvements.

**Tasks for the Replit Agent:**

1. **Project Initialization:**
   - Initialize a new project with a Node.js backend and a React frontend.
   - Set up the file structure with separate directories for backend and frontend code.

2. **Backend Development:**
   - Create an Express server with a GET endpoint `/api/jobs` that returns dummy job listings (later to be replaced with real API integrations).
   - Create a POST endpoint `/api/resume-analyze` that accepts resume text and returns a mock analysis result.
   - Connect to a database if needed, and ensure CORS is configured properly for frontend-backend communication.

3. **Frontend Development:**
   - Build a simple React app with at least two main views:
     - **Job Listings Page:** Fetch and display job listings from the `/api/jobs` endpoint.
     - **Resume Analyzer Page:** Include a form for users to submit their resume and display the analysis result from `/api/resume-analyze`.
   - Ensure responsive design using CSS or a UI framework like Bootstrap or Material-UI.

4. **Testing and Documentation:**
   - Include basic unit tests for the API endpoints.
   - Write brief documentation in a README.md outlining the setup steps, endpoints, and instructions for further development.

5. **Iterative Feedback:**
   - Set up error handling and logging for debugging.
   - Prepare for future expansion by keeping the architecture modular so additional candidate tools and job listing integrations can be added.

Please start by scaffolding the project structure and implementing the basic backend endpoints. Once the backend is working with dummy data, move on to building the frontend views that interact with these endpoints.